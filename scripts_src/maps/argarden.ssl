/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Arroyo Village
        Location: Arroyo
        Description: This is the Map Script for the Village of Arroyo

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: December 04, 1997

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "argarden"
#include "../headers/define.h"
#include "../headers/argarden.h"
#include "../headers/updatmap.h"

#define NAME                    SCRIPT_ARGARDEN

#include "../headers/command.h"
#include "../sfall/define_extra.h"

#define Spawn_Geckos(total, gecko_pid, mapvar)                    Spawn_Type(total, OBJ_TYPE_CRITTER, gecko_pid, SCRIPT_ACGECKO, mapvar)
#define Spawn_Plants(total, plant_pid, plant_script, mapvar)      Spawn_Type(total, OBJ_TYPE_ITEM, plant_pid, plant_script, mapvar)

procedure start;
procedure map_enter_p_proc;
procedure map_update_p_proc;

procedure Restock;
procedure Spawn_Type(variable total, variable type, variable object_pid, variable object_script, variable mapvar);
procedure Make_Geckos;
procedure Make_Plants;
procedure Kill_Brat;

export variable Nagor_Tile;


procedure start begin
end

procedure map_enter_p_proc begin
   Lighting;

   if (map_var(MVAR_Last_Respawn_Map) == 0) then begin
       call Restock;
   end

   if (((game_time - map_var(MVAR_Last_Respawn_Map)) >= ONE_GAME_DAY) and (not(is_loading_game))) then begin
       call Restock;
   end

   if ((global_var(GVAR_ARROYO_DOG) == DOG_RUN_OFF) and (map_var(MVAR_Kill_Runaway) == 0)) then begin
       set_map_var(MVAR_Kill_Runaway, 1);
       call Kill_Brat;
   end
   set_global_var(GVAR_LOAD_MAP_INDEX, 0);
end

procedure map_update_p_proc begin
   Lighting;
end

//Extracted procedure to reduce duplication
procedure Restock begin
   variable item;

   set_map_var(MVAR_Last_Respawn_Map, game_time);
   call Make_Geckos;
   call Make_Plants;
   if (not(tile_contains_obj_pid(HEX_XANDER, 0, PID_XANDER_ROOT))) then begin
       item := create_object_sid(PID_XANDER_ROOT, 0, 0, SCRIPT_AIXANDER);
       move_to(item, HEX_XANDER, 0);
       set_map_var(MVAR_Current_Xander_Root, map_var(MVAR_Current_Xander_Root) + 1);
   end
end

procedure Spawn_Type(variable total, variable type, variable object_pid, variable object_script, variable mapvar) begin
   variable counter := 0;
   variable item;
   variable item_hex := 0;

   for (counter := 0; counter < total; counter++) begin
      Next_Hex;
      item := create_object_sid(object_pid, 0, 0, object_script);
      while (item_hex <= 0) do begin
         item_hex := tile_num_in_direction(map_var(MVAR_Last_Spot), random(0, 5), random(0, 3));
      end
      set_map_var(mapvar, map_var(mapvar) + 1);
      if (type == OBJ_TYPE_CRITTER) then
         critter_attempt_placement(item, item_hex, 0);
      else if (type == OBJ_TYPE_ITEM) then
         move_to(item, item_hex, 0);
      counter += 1;
      item_hex := 0;
   end
end

procedure Make_Geckos begin
   variable New_Geckos := 0;
   variable New_SmGeckos := 0;

// Small Geckos
   if (map_var(MVAR_Current_Gecko_Easy) < MIN_SMALL_GECKO) then begin
       New_SmGeckos := random(MIN_SMALL_GECKO, MAX_SMALL_GECKO);
   end
   else if ((map_var(MVAR_Current_Gecko_Easy) >= MIN_SMALL_GECKO) and (map_var(MVAR_Current_Gecko_Easy) < MAX_SMALL_GECKO)) then begin
       New_SmGeckos := random(0, MAX_SMALL_GECKO - MIN_SMALL_GECKO);
   end

   ndebug("Making " + New_SmGeckos + " new small Geckos.");
   call Spawn_Geckos(New_SmGeckos, PID_GECKO_SMALL, MVAR_Current_Gecko_Easy);

// Tough small Geckos
   if (map_var(MVAR_Current_Gecko_Hard) < MIN_TOUGH_GECKO) then begin
       New_Geckos := random(MIN_TOUGH_GECKO, MAX_TOUGH_GECKO);
   end
   else if ((map_var(MVAR_Current_Gecko_Hard) >= MIN_TOUGH_GECKO) and (map_var(MVAR_Current_Gecko_Hard) < MAX_TOUGH_GECKO)) then begin
       New_Geckos := random(0, MAX_TOUGH_GECKO - MIN_TOUGH_GECKO);
   end

   ndebug("Making " + New_Geckos + " new small tough Geckos.");
   call Spawn_Geckos(New_Geckos, PID_TOUGH_GECKO_SMALL, MVAR_Current_Gecko_Hard);
end

procedure Make_Plants begin
   variable Xander_Counter := 0;
   variable New_Xanders := 0;
   variable Broc_Counter := 0;
   variable New_Broc := 0;
   variable item;
   variable item_hex;

// Xander Root Restock
   if (map_var(MVAR_Current_Xander_Root) < MIN_XANDER_ROOT) then begin
      New_Xanders := random(MIN_XANDER_ROOT, MAX_XANDER_ROOT);
   end

   ndebug("Making " + New_Xanders + " new Xander Roots.");
   call Spawn_Plants(New_Xanders, PID_XANDER_ROOT, SCRIPT_AIXANDER, MVAR_Current_Xander_Root);

// Broc Flower Restock
   if (map_var(MVAR_Current_Broc_Flower) < MIN_BROC_FLOWER) then begin
       New_Broc := random(MIN_BROC_FLOWER, MAX_BROC_FLOWER);
   end

   ndebug("Making " + New_Broc + " new Broc Flowers.");
   call Spawn_Plants(New_Broc, PID_BROC_FLOWER, SCRIPT_AIBROC, MVAR_Current_Broc_Flower);
end

procedure Kill_Brat begin
   variable dog;
   variable cousin;
   variable gecko;
   variable spear;

   // comment out by killap - acdog.int now makes the dog go invisible, rather than killing him
   //kill_critter_type(PID_DOG, KILL_DONT_LEAVE_BODY);

   cousin := create_object(PID_PRIMITIVE_VILLAGER_MALE, 0, 0);
   gecko := create_object(PID_TOUGH_GECKO_SMALL, 0, 0);
   spear := create_object(PID_SPEAR, 0, 0);

   critter_attempt_placement(cousin, HEX_DEAD_COUSIN, 0);
   critter_attempt_placement(gecko, HEX_DEAD_GECKO, 0);

   if (map_var(MVAR_Dog_Already_Dead) == 0) then begin
       dog := create_object(PID_DOG, 0, 0);
       critter_attempt_placement(dog, HEX_DEAD_DOG, 0);
   end

   Face_Critter(cousin, gecko);

   add_mult_objs_to_inven(cousin, spear, 1);

   kill_critter(dog, ANIM_fall_front_blood_sf);
   kill_critter(cousin, ANIM_fall_front_blood_sf);
   kill_critter(gecko, ANIM_fall_back_blood_sf);
end