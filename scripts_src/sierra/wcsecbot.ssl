/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name:
        Location:
        Description:

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "wcsecbot"
#include "../headers/define.h"
#include "../headers/depolva.h"
#include "../headers/depolvb.h"

#define NAME                    SCRIPT_WCSECBOT

#include "../headers/command.h"

#define PID_ROBO_ROCKETS                PID_ROBO_ROCKET_AMMO

#define FLOAT_TIME_MIN                  (20)            // in seconds
#define FLOAT_TIME_MAX                  (40)            // in seconds
#define TIMER_FLOAT                     1

#define REQUEST_NONE                    (0)
#define REQUEST_COMPLETE                (0)
#define REQUEST_MADE                    (1)

procedure start;
procedure critter_p_proc;
procedure talk_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure combat_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure timed_event_p_proc;
//procedure push_p_proc;

procedure Security;
procedure RepairMe;
procedure AmmoReplacement;
procedure Replace_Ammo_Type;
procedure CheckRequest;

procedure Set_Map_Info_1;
procedure Set_Map_Info_2;
procedure Set_Map_Info_3;
procedure Set_Map_Info_4;
procedure Set_Map_Info_5;
procedure Set_Map_Info_6;

#define LVAR_Timed_Event                (0)
#define LVAR_Active                     (1)             // 0 == Active, 1 == Inactive
#define LVAR_Gave_Exp                   (2)
#define LVAR_Repair_Request             (3)
#define LVAR_Have_Request_Num           (4)
#define LVAR_Ammo_Rocket                (5)
#define LVAR_Ammo_5mm                   (6)
#define LVAR_Ammo_Shells                (7)
#define LVAR_Initialized_Ammo           (8)
#include "../headers/robots.h"

variable Ammo_Type;
variable Ammo_Difference;
variable Repair_Counter;

procedure start begin
    call robot_self_arm;
    set_self_team(TEAM_SIERRA_BASE);
    set_self_ai(AI_SECURITY_BOT);
end

procedure critter_p_proc begin
   //new code - killap
   if (cur_map_index == MAP_SIERRA_123) then begin
       if (tile_in_tile_rect(17910,17890,19110,19090,self_tile) or tile_in_tile_rect(20702,20693,22302,22293,self_tile)) then begin
           if ((self_elevation == LEVEL_ONE) and (map_var(MVAR_Security_Level_1) == 0)) then begin
               set_self_invisible;      // invis
           end
           else if (self_elevation == LEVEL_ONE) then begin
               set_self_visible;      // vis
           end
       end
       else if (tile_in_tile_rect(16280,16274,19880,19874,self_tile)) then begin
           if ((self_elevation == LEVEL_THREE) and (map_var(MVAR_Security_Level_3) == 0)) then begin
               set_self_invisible;      // invis
           end
           else if (self_elevation == LEVEL_THREE) then begin
               set_self_visible;      // vis
           end
       end
       else begin
           set_self_visible;      // vis
       end
   end else if (cur_map_index == MAP_SIERRA_4) then begin
       if (tile_in_tile_rect(20290,20274,21490,21474,self_tile)) then begin
          if (map_var(MVAR_Security_Level_4) == 0) then begin
               set_self_invisible;      // invis
          end else begin
               set_self_visible;      // vis
          end
       end
       else begin
           set_self_visible;      // vis
       end
   end
   //end killap

   if ((global_var(GVAR_SIERRA_BASE_ENEMY) == 0) and (tile_in_tile_rect(16280,16274,19880,19874,self_tile)) and dude_in_sierra) then begin
   end
   else
       call Security;

   Repair_Counter+=1;
   if (dude_in_sierra and (Repair_Counter == 40)) then begin
       Repair_Counter:=0;
       call RepairMe;
   end

   if ((local_var(LVAR_Initialized_Ammo) != 0) and dude_in_sierra) then begin
       call AmmoReplacement;
   end

end

procedure timed_event_p_proc begin
   if (fixed_param == 1) then begin
       set_local_var(LVAR_Timed_Event,0);
       if( self_visible ) then //added by killap
         floater(random(105,108));
   end
end

procedure talk_p_proc begin
   script_overrides;

   if (sierra_security_off or
       (local_var(LVAR_Active) == 1)) then begin
       display_msg(mstr(104));
   end
   else if sierra_security_on then begin
       display_msg(mstr(103));
   end
end

procedure use_skill_on_p_proc begin
    call robot_use_skill;
end

procedure use_obj_on_p_proc begin
    call robot_use_obj;
end

procedure combat_p_proc begin
    if ((fixed_param == COMBAT_SUBTYPE_TURN) and (local_var(LVAR_Active) == 1)) then begin
        script_overrides;
        ndebug("I am disabled and won't attack!");
    end
end

procedure damage_p_proc begin
   if (local_var(LVAR_Active) == 0) then begin //added check - killap
      set_global_var(GVAR_SIERRA_BASE_SECURITY,SIERRA_SECURITY_ON);

      if dude_in_sierra then begin
         if (self_elevation == LEVEL_ONE) then begin
           set_map_var(MVAR_Security_Level_1,1);
         end
         else if (self_elevation == LEVEL_TWO) then begin
           set_map_var(MVAR_Security_Level_2,1);
         end
         else if (self_elevation == LEVEL_THREE) then begin
           set_map_var(MVAR_Security_Level_3,1);
         end
         else if (cur_map_index == MAP_SIERRA_4) then begin
           set_map_var(MVAR_Security_Level_4,1);
         end
      end
   end
end

procedure destroy_p_proc begin

   if dude_in_sierra then begin
       if (map_var(MVAR_Repair_Request1) == REPAIR_NONE) then begin
           call Set_Map_Info_1;
           set_map_var(MVAR_Repair_Request1,REPAIR_PICKUP);
           ndebug("Pickup on Unit 1");
       end
       else if (map_var(MVAR_Repair_Request2) == REPAIR_NONE) then begin
           call Set_Map_Info_2;
           set_map_var(MVAR_Repair_Request2,REPAIR_PICKUP);
           ndebug("Pickup on Unit 2");
       end
       else if (map_var(MVAR_Repair_Request3) == REPAIR_NONE) then begin
           call Set_Map_Info_3;
           set_map_var(MVAR_Repair_Request3,REPAIR_PICKUP);
           ndebug("Pickup on Unit 3");
       end
       else if (map_var(MVAR_Repair_Request4) == REPAIR_NONE) then begin
           call Set_Map_Info_4;
           set_map_var(MVAR_Repair_Request4,REPAIR_PICKUP);
           ndebug("Pickup on Unit 4");
       end
       else if (map_var(MVAR_Repair_Request5) == REPAIR_NONE) then begin
           call Set_Map_Info_5;
           set_map_var(MVAR_Repair_Request5,REPAIR_PICKUP);
           ndebug("Pickup on Unit 5");
       end
       else if (map_var(MVAR_Repair_Request6) == REPAIR_NONE) then begin
           call Set_Map_Info_6;
           set_map_var(MVAR_Repair_Request6,REPAIR_PICKUP);
           ndebug("Pickup on Unit 6");
       end

       else if (map_var(MVAR_Repair_Request1) < REPAIR_PICKUP) then begin
           call Set_Map_Info_1;
           set_map_var(MVAR_Repair_Request1,REPAIR_PICKUP);
           ndebug("Pickup on Unit 1");
       end
       else if (map_var(MVAR_Repair_Request2) < REPAIR_PICKUP) then begin
           call Set_Map_Info_2;
           set_map_var(MVAR_Repair_Request2,REPAIR_PICKUP);
           ndebug("Pickup on Unit 2");
       end
       else if (map_var(MVAR_Repair_Request3) < REPAIR_PICKUP) then begin
           call Set_Map_Info_3;
           set_map_var(MVAR_Repair_Request3,REPAIR_PICKUP);
           ndebug("Pickup on Unit 3");
       end
       else if (map_var(MVAR_Repair_Request4) < REPAIR_PICKUP) then begin
           call Set_Map_Info_4;
           set_map_var(MVAR_Repair_Request4,REPAIR_PICKUP);
           ndebug("Pickup on Unit 4");
       end
       else if (map_var(MVAR_Repair_Request5) < REPAIR_PICKUP) then begin
           call Set_Map_Info_5;
           set_map_var(MVAR_Repair_Request5,REPAIR_PICKUP);
           ndebug("Pickup on Unit 5");
       end
       else if (map_var(MVAR_Repair_Request6) < REPAIR_PICKUP) then begin
           call Set_Map_Info_6;
           set_map_var(MVAR_Repair_Request6,REPAIR_PICKUP);
           ndebug("Pickup on Unit 6");
       end
   end

end

procedure RepairMe begin
   variable max_hp;
   variable cur_hp;

   cur_hp:=self_cur_hits;
   max_hp:=self_max_hits;

   call CheckRequest;

   if dude_in_sierra then begin
       if ((max_hp > cur_hp) and (local_var(LVAR_Repair_Request) == REQUEST_NONE) and (map_var(MVAR_Free_Bots) != 0)) then begin

           ndebug("Send Repair Bot to section "+self_tile+" on level "+self_elevation+".");

           if (map_var(MVAR_Repair_Request1) == REPAIR_NONE) then begin
               call Set_Map_Info_1;
               set_map_var(MVAR_Repair_Request1,REPAIR_REQUEST);
           end
           else if (map_var(MVAR_Repair_Request2) == REPAIR_NONE) then begin
               call Set_Map_Info_2;
               set_map_var(MVAR_Repair_Request2,REPAIR_REQUEST);
           end
           else if (map_var(MVAR_Repair_Request3) == REPAIR_NONE) then begin
               call Set_Map_Info_3;
               set_map_var(MVAR_Repair_Request3,REPAIR_REQUEST);
           end
           else if (map_var(MVAR_Repair_Request4) == REPAIR_NONE) then begin
               call Set_Map_Info_4;
               set_map_var(MVAR_Repair_Request4,REPAIR_REQUEST);
           end
           else if (map_var(MVAR_Repair_Request5) == REPAIR_NONE) then begin
               call Set_Map_Info_5;
               set_map_var(MVAR_Repair_Request5,REPAIR_REQUEST);
           end
           else if (map_var(MVAR_Repair_Request6) == REPAIR_NONE) then begin
               call Set_Map_Info_6;
               set_map_var(MVAR_Repair_Request6,REPAIR_REQUEST);
           end
       end

       else if (max_hp == cur_hp) then begin
           set_local_var(LVAR_Repair_Request,REQUEST_COMPLETE);
           set_local_var(LVAR_Have_Request_Num,0);
       end
   end
end

procedure Security begin
   if ((global_var(GVAR_SIERRA_BASE_SECURITY) == SIERRA_SECURITY_ON) and (local_var(LVAR_Active) == 0)) then begin
       if ((self_can_see_dude) and dude_in_sierra) then begin
           if ((self_elevation == LEVEL_ONE) and (map_var(MVAR_Security_Level_1) == 1)) then begin
               attack(dude_obj);
           end
           else if ((self_elevation == LEVEL_TWO) and (map_var(MVAR_Security_Level_2) == 1)) then begin
               attack(dude_obj);
           end
           else if ((self_elevation == LEVEL_THREE) and (map_var(MVAR_Security_Level_3) == 1)) then begin
               attack(dude_obj);
           end
           //else if ((cur_map_index == MAP_SIERRA_4) and (global_var(GVAR_SIERRA_BASE_ALERT) == 1)) then begin
           else if ((cur_map_index == MAP_SIERRA_4) and (map_var(MVAR_Security_Level_4) == 1)) then begin
               //set_map_var(MVAR_Security_Level_4,1);
               attack(dude_obj);
           end
       end
       else if ((self_cur_hits == self_max_hits) and
                dude_in_sierra) then begin
           if (self_elevation == dude_elevation) then begin
               if ((self_elevation == LEVEL_ONE) and (map_var(MVAR_Security_Level_1) == 1)) then
                   self_walk_to_tile(tile_num_in_direction(dude_tile,random(0,5),random(1,5)));
               else if ((self_elevation == LEVEL_TWO) and (map_var(MVAR_Security_Level_2) == 1)) then
                   self_walk_to_tile(tile_num_in_direction(dude_tile,random(0,5),random(1,5)));
               else if ((self_elevation == LEVEL_THREE) and (map_var(MVAR_Security_Level_3) == 1)) then
                   self_walk_to_tile(tile_num_in_direction(dude_tile,random(0,5),random(1,5)));
               //else if ((cur_map_index == MAP_SIERRA_4) and (global_var(GVAR_SIERRA_BASE_ALERT) == 1)) then
               else if ((cur_map_index == MAP_SIERRA_4) and (map_var(MVAR_Security_Level_4) == 1)) then
                   self_walk_to_tile(tile_num_in_direction(dude_tile,random(0,5),random(1,5)));
           end
           else if ( (cur_map_index == MAP_SIERRA_123) or (cur_map_index == MAP_SIERRA_4) )then begin //edit by killap - or (cur_map_index == MAP_SIERRA_4)
               if ((self_elevation == LEVEL_ONE) and (map_var(MVAR_Security_Level_1) == 1)) then
                   self_walk_to_tile(tile_num_in_direction(self_tile,random(0,5),random(3,6)));
               else if ((self_elevation == LEVEL_TWO) and (map_var(MVAR_Security_Level_2) == 1)) then
                   self_walk_to_tile(tile_num_in_direction(self_tile,random(0,5),random(3,6)));
               else if ((self_elevation == LEVEL_THREE) and (map_var(MVAR_Security_Level_3) == 1)) then
                   self_walk_to_tile(tile_num_in_direction(self_tile,random(0,5),random(3,6)));
               //else if ((cur_map_index == MAP_SIERRA_4) and (global_var(GVAR_SIERRA_BASE_ALERT) == 1)) then
               else if ((cur_map_index == MAP_SIERRA_4) and (map_var(MVAR_Security_Level_4) == 1)) then
                   self_walk_to_tile(tile_num_in_direction(self_tile,random(0,5),random(3,6)));
           end

           if ( (cur_map_index == MAP_SIERRA_123) or (cur_map_index == MAP_SIERRA_4) ) then begin //edit by killap - or (cur_map_index == MAP_SIERRA_4)
               if ((self_elevation == LEVEL_ONE) and (map_var(MVAR_Security_Level_1) == 1) and (local_var(LVAR_Timed_Event) == 0)) then begin
                   set_local_var(LVAR_Timed_Event,1);
                   add_timer_event(self_obj,game_ticks(random(FLOAT_TIME_MIN,FLOAT_TIME_MAX)),1);
               end
               else if ((self_elevation == LEVEL_TWO) and (map_var(MVAR_Security_Level_2) == 1) and (local_var(LVAR_Timed_Event) == 0)) then begin
                   set_local_var(LVAR_Timed_Event,1);
                   add_timer_event(self_obj,game_ticks(random(FLOAT_TIME_MIN,FLOAT_TIME_MAX)),1);
               end
               else if ((self_elevation == LEVEL_THREE) and (map_var(MVAR_Security_Level_3) == 1) and (local_var(LVAR_Timed_Event) == 0)) then begin
                   set_local_var(LVAR_Timed_Event,1);
                   add_timer_event(self_obj,game_ticks(random(FLOAT_TIME_MIN,FLOAT_TIME_MAX)),1);
               end
               //else if ((cur_map_index == MAP_SIERRA_4) and (global_var(GVAR_SIERRA_BASE_ALERT) == 1)) then begin
               else if ((cur_map_index == MAP_SIERRA_4) and (map_var(MVAR_Security_Level_4) == 1)) then begin
                   set_local_var(LVAR_Timed_Event,1);
                   add_timer_event(self_obj,game_ticks(random(FLOAT_TIME_MIN,FLOAT_TIME_MAX)),1);
               end
           end
       end
   end
end

procedure CheckRequest begin
   if ((local_var(LVAR_Have_Request_Num) == 1) and (map_var(MVAR_Repair_Request1) == REPAIR_DESTROYED)) then begin
       set_local_var(LVAR_Repair_Request,REQUEST_NONE);
   end
   else if ((local_var(LVAR_Have_Request_Num) == 2) and (map_var(MVAR_Repair_Request2) == REPAIR_DESTROYED)) then begin
       set_local_var(LVAR_Repair_Request,REQUEST_NONE);
   end
   else if ((local_var(LVAR_Have_Request_Num) == 3) and (map_var(MVAR_Repair_Request3) == REPAIR_DESTROYED)) then begin
       set_local_var(LVAR_Repair_Request,REQUEST_NONE);
   end
   else if ((local_var(LVAR_Have_Request_Num) == 4) and (map_var(MVAR_Repair_Request4) == REPAIR_DESTROYED)) then begin
       set_local_var(LVAR_Repair_Request,REQUEST_NONE);
   end
   else if ((local_var(LVAR_Have_Request_Num) == 5) and (map_var(MVAR_Repair_Request5) == REPAIR_DESTROYED)) then begin
       set_local_var(LVAR_Repair_Request,REQUEST_NONE);
   end
   else if ((local_var(LVAR_Have_Request_Num) == 6) and (map_var(MVAR_Repair_Request6) == REPAIR_DESTROYED)) then begin
       set_local_var(LVAR_Repair_Request,REQUEST_NONE);
   end

end

procedure AmmoReplacement begin
   variable Ammo;
   variable Current_Count;

   if (local_var(LVAR_Ammo_Rocket) != -1) then begin
       Current_Count:=local_var(LVAR_Ammo_Rocket)/2;
       if (self_item_count(PID_ROBO_ROCKETS) < (Current_Count)) then begin
           Ammo_Difference:=local_var(LVAR_Ammo_Rocket) - self_item_count(PID_ROBO_ROCKETS);
           Ammo_Type:=PID_ROBO_ROCKETS;
           call Replace_Ammo_Type;
       end
   end

   else if (local_var(LVAR_Ammo_5mm) != -1) then begin
       Current_Count:=local_var(LVAR_Ammo_5mm)/2;
       if (self_item_count(PID_5MM_AP) < (Current_Count)) then begin
           Ammo_Difference:=local_var(LVAR_Ammo_5mm) - self_item_count(PID_5MM_AP);
           Ammo_Type:=PID_5MM_AP;
           call Replace_Ammo_Type;
       end
   end

   else if (local_var(LVAR_Ammo_Shells) != -1) then begin
       Current_Count:=local_var(LVAR_Ammo_Shells)/2;
       if (self_item_count(PID_SHOTGUN_SHELLS) < (Current_Count)) then begin
           Ammo_Difference:=local_var(LVAR_Ammo_Shells) - self_item_count(PID_SHOTGUN_SHELLS);
           Ammo_Type:=PID_SHOTGUN_SHELLS;
           call Replace_Ammo_Type;
       end
   end
end

procedure Replace_Ammo_Type begin

   if ((local_var(LVAR_Repair_Request) == REQUEST_NONE) and (map_var(MVAR_Free_Bots) != 0)) then begin
       if (map_var(MVAR_Repair_Request1) == REPAIR_NONE) then begin
           call Set_Map_Info_1;
           set_map_var(MVAR_Repair_Request1,REPAIR_REQUEST);
           set_map_var(MVAR_Ammo_Request_1a,Ammo_Type);
           set_map_var(MVAR_Ammo_Request_1b,Ammo_Difference);
       end
       else if (map_var(MVAR_Repair_Request2) == REPAIR_NONE) then begin
           call Set_Map_Info_2;
           set_map_var(MVAR_Repair_Request2,REPAIR_REQUEST);
           set_map_var(MVAR_Ammo_Request_2a,Ammo_Type);
           set_map_var(MVAR_Ammo_Request_2b,Ammo_Difference);
       end
       else if (map_var(MVAR_Repair_Request3) == REPAIR_NONE) then begin
           call Set_Map_Info_3;
           set_map_var(MVAR_Repair_Request3,REPAIR_REQUEST);
           set_map_var(MVAR_Ammo_Request_3a,Ammo_Type);
           set_map_var(MVAR_Ammo_Request_3b,Ammo_Difference);
       end
       else if (map_var(MVAR_Repair_Request4) == REPAIR_NONE) then begin
           call Set_Map_Info_4;
           set_map_var(MVAR_Repair_Request4,REPAIR_REQUEST);
           set_map_var(MVAR_Ammo_Request_4a,Ammo_Type);
           set_map_var(MVAR_Ammo_Request_4b,Ammo_Difference);
       end
       else if (map_var(MVAR_Repair_Request5) == REPAIR_NONE) then begin
           call Set_Map_Info_5;
           set_map_var(MVAR_Repair_Request5,REPAIR_REQUEST);
           set_map_var(MVAR_Ammo_Request_5a,Ammo_Type);
           set_map_var(MVAR_Ammo_Request_5b,Ammo_Difference);
       end
       else if (map_var(MVAR_Repair_Request6) == REPAIR_NONE) then begin
           call Set_Map_Info_6;
           set_map_var(MVAR_Repair_Request6,REPAIR_REQUEST);
           set_map_var(MVAR_Ammo_Request_6a,Ammo_Type);
           set_map_var(MVAR_Ammo_Request_6b,Ammo_Difference);
       end
   end
end

procedure Set_Map_Info_1 begin
   set_local_var(LVAR_Have_Request_Num,1);
   set_local_var(LVAR_Repair_Request,REQUEST_MADE);
   set_map_var(MVAR_Pid_Request1,self_pid);
   set_map_var(MVAR_Elevation_Request1,self_elevation);
   set_map_var(MVAR_Tile_Request1,self_tile);
end

procedure Set_Map_Info_2 begin
   set_local_var(LVAR_Have_Request_Num,2);
   set_local_var(LVAR_Repair_Request,REQUEST_MADE);
   set_map_var(MVAR_Pid_Request2,self_pid);
   set_map_var(MVAR_Elevation_Request2,self_elevation);
   set_map_var(MVAR_Tile_Request2,self_tile);
end

procedure Set_Map_Info_3 begin
   set_local_var(LVAR_Have_Request_Num,3);
   set_local_var(LVAR_Repair_Request,REQUEST_MADE);
   set_map_var(MVAR_Pid_Request3,self_pid);
   set_map_var(MVAR_Elevation_Request3,self_elevation);
   set_map_var(MVAR_Tile_Request3,self_tile);
end

procedure Set_Map_Info_4 begin
   set_local_var(LVAR_Have_Request_Num,4);
   set_local_var(LVAR_Repair_Request,REQUEST_MADE);
   set_map_var(MVAR_Pid_Request4,self_pid);
   set_map_var(MVAR_Elevation_Request4,self_elevation);
   set_map_var(MVAR_Tile_Request4,self_tile);
end

procedure Set_Map_Info_5 begin
   set_local_var(LVAR_Have_Request_Num,5);
   set_local_var(LVAR_Repair_Request,REQUEST_MADE);
   set_map_var(MVAR_Pid_Request5,self_pid);
   set_map_var(MVAR_Elevation_Request5,self_elevation);
   set_map_var(MVAR_Tile_Request5,self_tile);
end

procedure Set_Map_Info_6 begin
   set_local_var(LVAR_Have_Request_Num,6);
   set_local_var(LVAR_Repair_Request,REQUEST_MADE);
   set_map_var(MVAR_Pid_Request6,self_pid);
   set_map_var(MVAR_Elevation_Request6,self_elevation);
   set_map_var(MVAR_Tile_Request6,self_tile);
end
